name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.1)'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Install package
      run: pip install -e .

    - name: Run tests
      run: pytest tests/ -v

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Install package dependencies
      run: pip install -r requirements.txt

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/* --strict

    - name: List built packages
      run: ls -la dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: dist/

  publish-test-pypi:
    needs: build
    runs-on: ubuntu-latest
    environment: test-pypi
    
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: dist/

    - name: List downloaded packages
      run: ls -la dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true
        verbose: true
        attestations: false

  test-installation:
    needs: publish-test-pypi
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Test installation from Test PyPI
      run: |
        # Wait a bit for the package to be available
        sleep 60
        
        # Install from Test PyPI with retries
        for i in {1..3}; do
          echo "Attempt $i to install from Test PyPI..."
          if pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ readme2word-converter-vm; then
            break
          fi
          sleep 30
        done
        
        # Test the installation
        python -c "import readme2word; print(f'Installed version: {readme2word.__version__}')"
        readme2word --version

  publish-pypi:
    needs: test-installation
    runs-on: ubuntu-latest
    environment: pypi
    
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        attestations: false

  create-github-release:
    needs: publish-pypi
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: dist/

    - name: Get version from tag
      id: get_version
      env:
        EVENT_NAME: ${{ github.event_name }}
        INPUT_VERSION: ${{ github.event.inputs.version }}
        GITHUB_REF: ${{ github.ref }}
      run: |
        if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
          VERSION="$INPUT_VERSION"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"

    - name: Generate changelog
      id: changelog
      env:
        VERSION_NUMBER: ${{ steps.get_version.outputs.version_number }}
        VERSION: ${{ steps.get_version.outputs.version }}
      run: |
        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          # Get changelog section for this version
          awk '/^## \['"$VERSION_NUMBER"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
          
          # If no specific version found, use unreleased section
          if [ ! -s release_notes.md ]; then
            echo "### Changes" > release_notes.md
            echo "See [CHANGELOG.md](CHANGELOG.md) for detailed changes." >> release_notes.md
          fi
        else
          echo "### Changes" > release_notes.md
          echo "Release $VERSION" >> release_notes.md
          echo "" >> release_notes.md
          echo "This release includes improvements and bug fixes." >> release_notes.md
        fi
        
        echo "Generated release notes:"
        cat release_notes.md

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ steps.get_version.outputs.version }}
        VERSION_NUMBER: ${{ steps.get_version.outputs.version_number }}
      run: |
        # Create release with gh CLI
        gh release create "$VERSION" \
          --title "Release $VERSION" \
          --notes-file release_notes.md \
          --draft=false \
          --prerelease=false
        
        # Upload all files in dist/ as release assets
        gh release upload "$VERSION" dist/* --clobber

  notify:
    needs: create-github-release
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Get version from tag
      id: get_version
      env:
        EVENT_NAME: ${{ github.event_name }}
        INPUT_VERSION: ${{ github.event.inputs.version }}
        GITHUB_REF: ${{ github.ref }}
      run: |
        if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
          VERSION="$INPUT_VERSION"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Notify success
      if: needs.create-github-release.result == 'success'
      env:
        VERSION: ${{ steps.get_version.outputs.version }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
      run: |
        echo "üéâ Release $VERSION published successfully!"
        echo "üì¶ PyPI: https://pypi.org/project/readme2word-converter-vm/"
        echo "üß™ Test PyPI: https://test.pypi.org/project/readme2word-converter-vm/"
        echo "üêô GitHub: $SERVER_URL/$REPOSITORY/releases"

    - name: Notify failure
      if: failure()
      env:
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      run: |
        echo "‚ùå Release workflow failed!"
        echo "Check the logs for details: $SERVER_URL/$REPOSITORY/actions/runs/$RUN_ID"
        echo "Common issues:"
        echo "- Package version already exists"
        echo "- Missing or invalid API tokens"
        echo "- Package metadata validation errors" 