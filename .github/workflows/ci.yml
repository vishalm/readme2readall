name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  # Code Quality and Linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run Black (code formatting)
        run: black --check --diff .

      - name: Run isort (import sorting)
        run: isort --check-only --diff .

      - name: Run Flake8 (linting)
        run: flake8 .

      - name: Run MyPy (type checking)
        run: mypy readme2word/ --ignore-missing-imports

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run Safety (dependency vulnerability scan)
        run: safety check --json

      - name: Run Bandit (security linting)
        run: bandit -r readme2word/ -f json

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto

  # Multi-platform Testing
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y wkhtmltopdf

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install wkhtmltopdf

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=readme2word --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_DEFAULT_VERSION
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Package Testing
  package:
    name: Package Testing
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Test package installation
        run: |
          pip install dist/*.whl
          readme2word --version
          python -c "import readme2word; print(readme2word.__version__)"

      - name: Test CLI functionality
        run: |
          echo "# Test README" > test_readme.md
          echo "This is a test document." >> test_readme.md
          readme2word test_readme.md -o test_output.docx
          ls -la test_output.docx

      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # Docker Testing
  docker:
    name: Docker Testing
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: readme2word:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Test web interface startup
          docker run -d --name test-container -p 8501:8501 readme2word:test
          sleep 10
          
          # Check if container is running
          docker ps | grep test-container
          
          # Test CLI functionality
          echo "# Docker Test" > docker_test.md
          echo "Testing Docker container CLI." >> docker_test.md
          docker exec test-container readme2word --version
          
          # Cleanup
          docker stop test-container
          docker rm test-container

  # Integration Testing
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run integration tests
        run: |
          pytest tests/test_integration.py -v --timeout=300

      - name: Test Mermaid diagram conversion
        run: |
          cat > mermaid_test.md << 'EOF'
          # Mermaid Test Document
          
          ## Flowchart
          ```mermaid
          graph TD
              A[Start] --> B{Decision}
              B -->|Yes| C[Process A]
              B -->|No| D[Process B]
              C --> E[End]
              D --> E
          ```
          
          ## Sequence Diagram
          ```mermaid
          sequenceDiagram
              participant User
              participant App
              User->>App: Request
              App-->>User: Response
          ```
          EOF
          
          readme2word mermaid_test.md -o mermaid_output.docx --debug
          ls -la mermaid_output.docx

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Generate large test document
        run: |
          python -c "
          import random
          import string
          
          content = ['# Large Document Test\n\n']
          
          for i in range(100):
              content.append(f'## Section {i+1}\n\n')
              for j in range(10):
                  text = ''.join(random.choices(string.ascii_letters + ' ', k=100))
                  content.append(f'{text}\n\n')
              
              # Add some tables
              content.append('| Column 1 | Column 2 | Column 3 |\n')
              content.append('|----------|----------|----------|\n')
              for k in range(5):
                  content.append(f'| Data {k+1} | Value {k+1} | Result {k+1} |\n')
              content.append('\n')
          
          with open('large_test.md', 'w') as f:
              f.writelines(content)
          "

      - name: Performance test - Large document
        run: |
          time readme2word large_test.md -o large_output.docx
          ls -lh large_output.docx

      - name: Performance test - Multiple small documents
        run: |
          for i in {1..10}; do
            echo "# Document $i" > "doc_$i.md"
            echo "Content for document $i" >> "doc_$i.md"
            time readme2word "doc_$i.md" -o "output_$i.docx"
          done

  # Compatibility Testing
  compatibility:
    name: Compatibility Tests
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Test minimum dependencies
        run: |
          python -m pip install --upgrade pip
          # Install with minimum supported versions
          pip install streamlit==1.28.0 python-docx==0.8.11 markdown==3.5.0
          pip install beautifulsoup4==4.12.0 requests==2.31.0 Pillow==10.0.0
          pip install -e . --no-deps
          
          # Test basic functionality
          readme2word --version
          echo "# Compatibility Test" > compat_test.md
          readme2word compat_test.md -o compat_output.docx

      - name: Test with latest dependencies
        run: |
          pip install --upgrade streamlit python-docx markdown beautifulsoup4 requests Pillow
          readme2word --version
          readme2word compat_test.md -o compat_latest.docx

  # Final Status Check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, security, test, package, docker, integration]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.quality.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.package.result }}" == "success" && \
                "${{ needs.docker.result }}" == "success" && \
                "${{ needs.integration.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed!"
            echo "Quality: ${{ needs.quality.result }}"
            echo "Security: ${{ needs.security.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Package: ${{ needs.package.result }}"
            echo "Docker: ${{ needs.docker.result }}"
            echo "Integration: ${{ needs.integration.result }}"
            exit 1
          fi

      - name: Post success comment
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All CI checks passed! This PR is ready for review.'
            }) 